#include <iostream>
#include <cmath>
#include <ctime>

using namespace std;

double f(double x1, double x2, double x3)
{
	double y = 0;
	y = 7 * x1*x1 + 4 * x2*x2 + 6 * x3*x3 - 3 * x1*x2 + x1*x3 - x2*x3 + x1 - x2 + x3;
	return y;
}

double x1d(double x1, double x2, double x3)
{
	double y = 0;
	y = 14 * x1 - 3 * x2 + x3 + 1;
	return y;
}

double x2d(double x1, double x2, double x3)
{
	double y = 0;
	y = 8 * x2 - 3 * x1 - x3 - 1;
	return y;
}

double x3d(double x1, double x2, double x3)
{
	double y = 0;
	y = 12 * x3 + x1 - x2 + 1;
	return y;
}

double ksialpha(double x1, double x2, double x3, double alpha)
{
	double y = 0;
	y = 7 * (x1 - alpha*x1d(x1, x2, x3))*(x1 - alpha*x1d(x1, x2, x3)) + 4 * (x2 - alpha*x2d(x1, x2, x3))*(x2 - alpha*x2d(x1, x2, x3)) + 6 * (x3 - alpha*x3d(x1, x2, x3))*(x3 - alpha*x3d(x1, x2, x3)) - 3 * (x1 - alpha*x1d(x1, x2, x3))*(x2 - alpha*x2d(x1, x2, x3)) + (x1 - alpha*x1d(x1, x2, x3))*(x3 - alpha*x3d(x1, x2, x3)) - (x2 - alpha*x2d(x1, x2, x3))*(x3 - alpha*x3d(x1, x2, x3)) + (x1 - alpha*x1d(x1, x2, x3)) - (x2 - alpha*x2d(x1, x2, x3)) + (x3 - alpha*x3d(x1, x2, x3));
	return y;
}

double feealpha(double x1, double x2, double x3, double y1, double y2, double y3, double alpha)
{
	double y = 0;
	y = 7 * (x1 + alpha*(y1-x1))*(x1 + alpha*(y1 - x1)) + 4 * (x2 + alpha*(y2 - x2))*(x2 + alpha*(y2 - x2)) + 6 * (x3 + alpha*(y3 - x3))*(x3 + alpha*(y3 - x3)) - 3 * (x1 + alpha*(y1 - x1))*(x2 + alpha*(y2 - x2)) + (x1 + alpha*(y1 - x1))*(x3 + alpha*(y3 - x3)) - (x2 + alpha*(y2 - x2))*(x3 + alpha*(y3 - x3)) + (x1 + alpha*(y1 - x1)) - (x2 + alpha*(y2 - x2)) + (x3 + alpha*(y3 - x3));
	return y;
}

double ksialphamin(double x1, double x2, double x3)
{
	double a = 0;
	double alpha = a;

	while (a <= 1)
	{
		if (ksialpha(x1, x2, x3, a) < ksialpha(x1, x2, x3, alpha))
			alpha = a;
		a += 0.01;
	}
	return alpha;
}

double feealphamin(double x1, double x2, double x3, double y1, double y2, double y3)
{
	double a = 0;
	double alpha = a;

	while (a <= 1)
	{
		if (feealpha(x1, x2, x3, y1, y2, y3, a) < feealpha(x1, x2, x3, y1, y2, y3, alpha))
			alpha = a;
		a += 0.01;
	}
	return alpha;
}

double norma(double x1, double x2, double x3)
{
	double y = 0;
	y = sqrt(x1*x1 + x2*x2 + x3*x3);
	return y;
}

int main() //17,141 f(x)=7*x1*x1+4*x2*x2+6*x3*x3-3*x1*x2+x1*x3-x2*x3+x1-x2+x3
{

	cout << "f(x) = 7*x1^2+4*x2^2+6*x3^2-3*x1*x2+x1*x3-x2*x3+x1-x2+x3" << endl;
	cout << "eps = 0.001" << endl << endl;

	double x10 = 1, x20 = 1, x30 = 1;//x0
	double eps0 = 0.001, alpha0 = 0.05;

	int k = 0;//kolichestvo vychislenii
	bool stop = false;//kriterii ostanovki

	//1 -- MNGS
	unsigned int start_time = clock();

	double x1 = x10, x2 = x20, x3 = x30;
	double x11 = x1, x21 = x2, x31 = x3;
	double eps = eps0, alpha = alpha0;

	while (stop == false)
	{
		k++;

		alpha = ksialphamin(x1, x2, x3);
		x11 = x1 - alpha*x1d(x1, x2, x3);
		x21 = x2 - alpha*x2d(x1, x2, x3);
		x31 = x3 - alpha*x3d(x1, x2, x3);

		if (norma(x1d(x11, x21, x31), x2d(x11, x21, x31), x3d(x11, x21, x31)) < eps)
			stop = true;

		x1 = x11, x2 = x21, x3 = x31;
	}

	unsigned int end_time = clock();
	unsigned int search_time = end_time - start_time;

	cout << "MNGS:" << endl;
	cout << "xmin = (" << x11 << ", " << x21 << ", " << x31 << "), f(xmin) = " << f(x11, x21, x31) << endl;
	cout << "Kolichestvo vychisleniy: " << k << endl;
	cout << "Vremya vypolneniya: " << search_time << endl << endl;

	//1 --MNGS

	//2 -- Method gradientnyi s postoyannym shagom
	start_time = clock();

	x1 = x10, x2 = x20, x3 = x30;
	double x12 = x1, x22 = x2, x32 = x3;
	eps = eps0, alpha = 0.001;

	k = 0;//kolichestvo vychislenii
	stop = false;//kriterii ostanovki

	while (stop == false)
	{
		k++;

		x12 = x1 - alpha * x1d(x1, x2, x3);
		x22 = x2 - alpha * x2d(x1, x2, x3);
		x32 = x3 - alpha * x3d(x1, x2, x3);
		
		if (norma(x1d(x12, x22, x32), x2d(x12, x22, x32), x3d(x12, x22, x32)) < eps)//kriterii ostanovki
			stop = true;

		x1 = x12, x2 = x22, x3 = x32;
	}

	end_time = clock();
	search_time = end_time - start_time;

	cout << "Method gradientnyi s postoyannym shagom alpha = 0.001:" << endl;
	cout << "xmin = (" << x12 << ", " << x22 << ", " << x32 << "), f(xmin) = " << f(x12, x22, x32) << endl;
	cout << "Kolichestvo vychisleniy: " << k << endl;
	cout << "Vremya vypolneniya: " << search_time << endl << endl;

	//2 -- Method gradientnyi s postoyannym shagom

	//3 -- Method rashodyashegosya ryada
	start_time = clock();

	x1 = x10, x2 = x20, x3 = x30;
	double x13 = x1, x23 = x2, x33 = x3;
	eps = eps0, alpha = alpha0;

	k = 0;//kolichestvo vychislenii
	stop = false;//kriterii ostanovki

	while (stop == false)
	{
		k++;

		x13 = x1 - x1d(x1, x2, x3)/k;
		x23 = x2 - x2d(x1, x2, x3)/k;
		x33 = x3 - x3d(x1, x2, x3)/k;

		if (norma(x1d(x13, x23, x33), x2d(x13, x23, x33), x3d(x13, x23, x33)) < eps)//kriterii ostanovki
			stop = true;

		x1 = x13, x2 = x23, x3 = x33;
	}

	end_time = clock();
	search_time = end_time - start_time;

	cout << "Method rashodyashegosya ryada alpha = 1/k:" << endl;
	cout << "xmin = (" << x13 << ", " << x23 << ", " << x33 << "), f(xmin) = " << f(x13, x23, x33) << endl;
	cout << "Kolichestvo vychisleniy: " << k << endl;
	cout << "Vremya vypolneniya: " << search_time << endl << endl;

	//3 -- Method rashodyashegosya ryada

	//4 -- Uskorennyi gradientnyi spusk p-go poryadka, p=3
	start_time = clock();

	x1 = x10, x2 = x20, x3 = x30;
	double x14 = x1, x24 = x2, x34 = x3;
	eps = eps0, alpha = alpha0;

	double y1 = x1, y2 = x2, y3 = x3;

	k = 0;//kolichestvo vychislenii
	stop = false;//kriterii ostanovki
	
	while (stop == false)
	{
		for (int i = 0; i < 3; i++)
		{
			k++;
			alpha = ksialphamin(y1, y2, y3);
			x14 = x1 - alpha*x1d(y1, y2, y3);
			x24 = x2 - alpha*x2d(y1, y2, y3);
			x34 = x3 - alpha*x3d(y1, y2, y3);

			y1 = x14, y2 = x24, y3 = x34;
		}

		alpha = feealphamin(x1, x2, x3, y1, y2, y3);

		k++;
		x14 = x1 + alpha*(y1 - x1);
		x24 = x2 + alpha*(y2 - x2);
		x34 = x3 + alpha*(y3 - x3);

		if (norma(x1d(x14, x24, x34), x2d(x14, x24, x34), x3d(x14, x24, x34)) < eps)//kriterii ostanovki
			stop = true;

		x1 = x14, x2 = x24, x3 = x34;
	}


	end_time = clock();
	search_time = end_time - start_time;

	cout << "Uskorennyi gradientnyi spusk p-go poryadka, p=3:" << endl;
	cout << "xmin = (" << x14 << ", " << x24 << ", " << x34 << "), f(xmin) = " << f(x14, x24, x34) << endl;
	cout << "Kolichestvo vychisleniy: " << k << endl;
	cout << "Vremya vypolneniya: " << search_time << endl << endl;

	//4 -- Uskorennyi gradientnyi spusk p-go poryadka, p=3

	system("pause");
	return 0;
}
